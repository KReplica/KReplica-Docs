package io.availe.demo.playground

import io.availe.Replicate
import io.availe.models.DtoVariant
import io.availe.models.NominalTyping

/*
All inline-value classes are generated in the bottom of the output file.
 */

// Enabling nominal typing wraps primitive properties in inline value classes.
@Replicate.Model(variants = [DtoVariant.DATA], nominalTyping = NominalTyping.ENABLED)
private interface Order {
    // These will be generated as `OrderId(val value: Long)` and `CustomerId(val value: Long)`.
    val id: Long
    val customerId: Long

    // You can disable nominal typing on a per-property basis.
    // `totalAmount` will be generated as a standard `Double`.
    @Replicate.Property(nominalTyping = NominalTyping.DISABLED)
    val totalAmount: Double
}

/*
Personally, since developing it, I've come to believe that DTOs owning the
value classes are an anti-pattern, as I prefer the source model to own it.

I've since grown to prefer the "Compile-Safe API Mappers" pattern. This
pattern is not generated by KReplica, but instead a pattern that KReplica DTOs enable.
Check the documentation for more info.

However, I'm aware that some developers opt for a "flat-model," with no distinction
between DTOs and a domain model. If that's your style, this feature might be useful for you.
 */