[
  {
    "slug": "basic-replication",
    "name": "1. Basic Replication",
    "description": "Demonstrates the core annotations. Shows how to generate DATA, CREATE, and PATCH variants and how to override model-level settings for specific properties."
  },
  {
    "slug": "schema-versioning",
    "name": "2. Versioned DTOs",
    "description": "Shows how to safely evolve an API by creating a versioned, sealed hierarchy (V1, V2). This enables compile-time safety with exhaustive `when` expressions."
  },
  {
    "slug": "direct-annotations",
    "name": "3. Directly Applying Annotations",
    "description": "Covers other useful features: applying standard annotations like @Deprecated directly, using @Replicate.Hide to disable generation, and manually setting version numbers with @Replicate.SchemaVersion."
  },
  {
    "slug": "serialization-and-apply-annotation",
    "name": "4. Serialization Part I: The Apply Annotation",
    "description": "Covers other useful features: applying standard annotations like @Deprecated directly, using @Replicate.Hide to disable generation, and manually setting version numbers with @Replicate.SchemaVersion."
  },
  {
    "slug": "advanced-serialization",
    "name": "5. Serialization Part II: Advanced Features",
    "description": "Shows integration with `kotlinx.serialization`. While many annotations can be applied directly, @Replicate.Apply serves as a workaround for those that can't (like @Serializable) or for applying annotations to specific variants."
  },
  {
    "slug": "contextual-nesting-unversioned",
    "name": "6. Contextual Nesting (Unversioned)",
    "description": "Illustrates how KReplica intelligently handles nested replicated models, ensuring a parent's `CreateRequest` automatically uses the child's `CreateRequest`."
  },
  {
    "slug": "contextual-nesting-versioned",
    "name": "7. Contextual Nesting (Versioned)",
    "description": "Illustrates how KReplica intelligently handles nested replicated models, ensuring a parent's `CreateRequest` automatically uses the child's `CreateRequest`."
  },
  {
    "slug": "hide-annotation",
    "name": "8. The Hide Annotation",
    "description": "Illustrates how KReplica intelligently handles nested replicated models, ensuring a parent's `CreateRequest` automatically uses the child's `CreateRequest`."
  }
]