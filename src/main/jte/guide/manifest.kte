@import io.availe.kreplicadocs.common.GuideContentTemplate
@import io.availe.kreplicadocs.common.CodeSnippet
@param builder: io.availe.kreplicadocs.services.GuideBuilder
@param vm: io.availe.kreplicadocs.model.view.PageViewModel

!{ builder.startSection(
    id = "introduction",
    title = "Introduction",
    description = @`<p>This guide walks through KReplica's API, codegen output, and common patterns. KReplica is a DTO
    generator, which lets you define multiple DTO variants from one interface, among other things.</p>`
) }
!{ builder.addSubSection(id = "introduction-preface", title = "Preface", contentTemplate = GuideContentTemplate.INTRODUCTION_PREFACE) }
!{ builder.addSubSection(id = "introduction-setup", title = "Setup", contentTemplate = GuideContentTemplate.INTRODUCTION_SETUP) }
!{ builder.addSubSection(id = "introduction-stability", title = "API Stability", contentTemplate = GuideContentTemplate.INTRODUCTION_STABILITY) }
!{ builder.endSection() }

!{ builder.startSection(
    id = "api-annotations",
    title = "API Annotations",
    description = @`<p>This section covers the 5 annotations present in KReplica. Note the first 3 annotations are the
    important ones, with the latter two being more niche, if not entirely optional, in nature.</p>`
) }
!{ builder.addSubSection(id = "api-replicate-model", title = "@Replicate.Model", contentTemplate = GuideContentTemplate.API_ANNOTATIONS_REPLICATE_MODEL, exampleSnippet = CodeSnippet.API_REPLICATE_MODEL) }
!{ builder.addSubSection(id = "api-replicate-property", title = "@Replicate.Property", contentTemplate = GuideContentTemplate.API_ANNOTATIONS_REPLICATE_PROPERTY, exampleSnippet = CodeSnippet.API_REPLICATE_PROPERTY) }
!{ builder.addSubSection(id = "api-replicate-apply", title = "@Replicate.Apply", contentTemplate = GuideContentTemplate.API_ANNOTATIONS_REPLICATE_APPLY, exampleSnippet = CodeSnippet.API_REPLICATE_APPLY) }
!{ builder.addSubSection(id = "api-replicate-schema-version", title = "@Replicate.SchemaVersion", contentTemplate = GuideContentTemplate.API_ANNOTATIONS_REPLICATE_SCHEMA_VERSION, exampleSnippet = CodeSnippet.API_REPLICATE_SCHEMA_VERSION) }
!{ builder.addSubSection(id = "api-replicate-hide", title = "@Replicate.Hide", contentTemplate = GuideContentTemplate.API_ANNOTATIONS_REPLICATE_HIDE, exampleSnippet = CodeSnippet.API_REPLICATE_HIDE) }
!{ builder.endSection() }

!{ builder.startSection(
    id = "api-concepts",
    title = "API Concepts",
    description = @`<p>This section covers the same topics as “API Annotations,” but instead of focusing on syntax and
    parameters, it explores the underlying concepts and rationale.</p>`
) }
!{ builder.addSubSection(id = "api-dto-versioning", title = "DTO Versioning", contentTemplate = GuideContentTemplate.API_CONCEPTS_DTO_VERSIONING, exampleSnippet = CodeSnippet.GUIDE_REF_VERSIONING) }
!{ builder.addSubSection(id = "api-nominal-typing", title = "Nominal Typing", contentTemplate = GuideContentTemplate.API_CONCEPTS_NOMINAL_TYPING, exampleSnippet = CodeSnippet.GUIDE_REF_NOMINAL_TYPING) }
!{ builder.addSubSection(id = "api-applying-annotations", title = "Applying Annotations", contentTemplate = GuideContentTemplate.API_CONCEPTS_APPLYING_ANNOTATIONS) }
!{ builder.addSubSection(id = "api-auto-contextualization", title = "Auto-Contextualization", contentTemplate = GuideContentTemplate.API_CONCEPTS_AUTO_CONTEXTUALIZATION, exampleSnippet = CodeSnippet.API_AUTO_CONTEXTUAL) }
!{ builder.endSection() }

!{ builder.startSection(
    id = "generated-code",
    title = "Understanding the Generated Code",
    description = @`<p>This section covers the codegen output of KReplica, and how to understand it.</p>`
) }
!{ builder.addSubSection(id = "generated-code-schemas", title = "Schemas", contentTemplate = GuideContentTemplate.GENERATED_CODE_SCHEMAS, tabsKey = "generatedCodeSchemasTabs") }
!{ builder.addSubSection(id = "generated-code-patchable", title = "The Patchable Wrapper", contentTemplate = GuideContentTemplate.GENERATED_CODE_PATCHABLE, tabsKey = "patchableWrapperTabs") }
!{ builder.addSubSection(id = "generated-code-local-variants", title = "Local Variants", contentTemplate = GuideContentTemplate.GENERATED_CODE_LOCAL_VARIANTS, tabsKey = "localVariantsTabs") }
!{ builder.addSubSection(id = "generated-code-global-variants", title = "Global Variants", contentTemplate = GuideContentTemplate.GENERATED_CODE_GLOBAL_VARIANTS, tabsKey = "globalVariantsTabs") }
!{ builder.endSection() }

!{ builder.startSection(
    id = "patterns",
    title = "Core Patterns & Use Cases",
    description = @`<p>These are some recommended patterns. "Patterns" are not part of KReplica directly, but instead
    show how you can use Kotlin features with KReplica.</p>`
) }
!{ builder.addSubSection(id = "patterns-exhaustive-when", title = "Exhaustive `when` Statements", contentTemplate = GuideContentTemplate.PATTERNS_EXHAUSTIVE_WHEN_STATEMENTS, tabsKey = "whenTabs") }
!{ builder.addSubSection(id = "patterns-kotlinx-serialization", title = "kotlinx.serialization Integration", contentTemplate = GuideContentTemplate.PATTERNS_KOTLINX_SERIALIZATION, exampleSnippet = CodeSnippet.GUIDE_REF_SERIALIZATION_BASIC) }
!{ builder.addSubSection(id = "patterns-api-mappers", title = "Compile-Safe DTO Mapper", contentTemplate = GuideContentTemplate.PATTERNS_API_MAPPERS, tabsKey = "apiMapperTabs") }
!{ builder.endSection() }

!{ builder.startSection(
    id = "faq",
    title = "Frequently Asked Questions",
    description = @``
) }
!{ builder.addSubSection(id = "faq-broader-replication", title = "Broader Property Replication?", contentTemplate = GuideContentTemplate.FAQ_BROADER_REPLICATION) }
!{ builder.addSubSection(id = "faq-compilation-order", title = "Compilation Order", contentTemplate = GuideContentTemplate.FAQ_COMPILATION_ORDER) }
!{ builder.addSubSection(id = "faq-private-keyword", title = "Use of `private` Keyword", contentTemplate = GuideContentTemplate.FAQ_PRIVATE_KEYWORD) }
!{ builder.endSection() }